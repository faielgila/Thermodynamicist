using Core.VariableTypes;
using System;
using System.Collections.Concurrent;

namespace Core;

/// <summary>
/// Handles a cache of calculated values for a given set of input variables.
/// Input variables must be a set of <see cref="ThermoVariable"/>s.
/// </summary>
public class CalculationCache
{
	/// <summary>
	/// Cache of calculated values.
	/// </summary>
	private readonly ConcurrentDictionary<Int32, double> hashCache = [];

	public CalculationCache() { }

	/// <summary>
	/// Gets the cached value given the set of input variables provided.
	/// </summary>
	/// <param name="methodName">Name of the method/function used to generate the value.</param>
	/// <param name="inputVars">Array of input variables.</param>
	/// <returns>Value cached from the provided inputVars, or null if the value has not been cached yet.</returns>
	public double? GetCached(string methodName, ThermoVariable[] inputVars)
	{
		bool IsCached = hashCache.TryGetValue(GenerateHashcode(methodName, inputVars), out double outputVar);
		if (IsCached) return outputVar;
		else return null;
	}

	/// <summary>
	/// Caches the value generated by the given set of input variables.
	/// Overwrites any existing value already cached.
	/// </summary>
	/// <param name="inputVars">Array of input variables</param>
	/// <param name="outputVar">Value to cache</param>
	public void CacheValue(string methodName, ThermoVariable[] inputVars, double outputVar)
	{
		var hashcode = GenerateHashcode(methodName, inputVars);
		if (hashCache.ContainsKey(hashcode)) hashCache.TryRemove(hashcode, out outputVar);
		hashCache.TryAdd(hashcode, outputVar);
	}

	/// <summary>
	/// Generates the hashcode for a list of input variables.
	/// </summary>
	/// <returns>32-bit unsigned integer, representing a hashcode.</returns>
	private int GenerateHashcode(string methodName, ThermoVariable[] variables)
	{
		// Leftmost part of the hashcode is from the method name.
		int hashcode = methodName.GetHashCode();

		// Concatenate each integer (representing a hashcode) into one big hashcode
		// TODO : Develop an algorithm for which the order in which input inputVars
		//        are stored in the array does not affect the final hashcode
		foreach (ThermoVariable var in variables)
		{
			hashcode = (hashcode << 32) + var.Value.GetHashCode();
		}

		return hashcode;
	}
}
